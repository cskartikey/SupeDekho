import OpenAI from 'openai';
import dotenv from 'dotenv';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  baseURL: "http://jamsapi.hackclub.dev/openai"
});

async function generateDalleImage(prompt) {
  try {
    const dalleResponse = await openai.images.generate({
      prompt: prompt,
      n: 1,
    });

    if (typeof dalleResponse === 'string') {
      console.log(dalleResponse)
      const parsedResponse = JSON.parse(dalleResponse);
      if (parsedResponse.data && parsedResponse.data.length > 0) {
        return parsedResponse.data[0].url;
      } else {
        throw new Error("No data returned from DALL-E API");
      }
    } else {
      throw new Error("Invalid response format from DALL-E API");
    }
  } catch (error) {
    console.error("Error during DALL-E image generation:", error);
    return null;
  }
}

export default async function handler(req, res) {
  const villainName = req.body.villainName;
  const prompt = `
    ${villainName}
    The response should include the following:
    - Name
    - Age
    - Appearance (a cartoonish image generated by DALL-E)
    - Powers (humorous and funny, not serious and in one paragraph)
  `;

  toast.info('Generating super-villain details...', { autoClose: false });

  try {
    const chatCompletion = await openai.chat.completions.create({
      messages: [{ role: 'user', content: prompt }],
      model: 'gpt-3.5-turbo',
    });

    if (chatCompletion.choices && chatCompletion.choices.length > 0) {
      const superVillain = chatCompletion.choices[0].message.content;
      const appearancePromptMatch = superVillain.match(/Appearance: (.*)/);
      if (appearancePromptMatch) {
        const appearancePrompt = appearancePromptMatch[1] + ", in a cartoonish style";
        const dalleImage = await generateDalleImage(appearancePrompt);

        if (dalleImage) {
          toast.dismiss();
          toast.success('Super-villain generated successfully!');
          res.status(200).json({ text: superVillain, imageUrl: dalleImage });
        } else {
          toast.dismiss();
          toast.error('Failed to generate image.');
          res.status(500).json({ error: 'Failed to generate image.' });
        }
      } else {
        toast.dismiss();
        toast.error('Failed to extract appearance description.');
        res.status(500).json({ error: 'Failed to extract appearance description.' });
      }
    } else {
      toast.dismiss();
      toast.error('Failed to generate super-villain.');
      res.status(500).json({ error: 'Failed to generate super-villain.' });
    }
  } catch (error) {
    toast.dismiss();
    toast.error('Internal server error.');
    console.error("Error during chat completion or DALL-E image generation:", error);
    res.status(500).json({ error: 'Internal server error.' });
  }
}
